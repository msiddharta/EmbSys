#include "pascal.h"
#include <iostream>
#include <iomanip>
 
unsigned long long binomialCoeff(int n, int k)
{
    unsigned long long result = 1;
    if (k > n) {
        return 0;  // Binomialcoeff for k > n is 0
    }

    if((k == 0) || (k==n)){
        return 1;
    }

    if (k > n - k) {
        k = n - k;  // Symmetrie
    }

    for(int i = 1; i<=k; i++){
        result *= (n - k + i);   // Numerator (ZÃ¤hler): n, n-1, .., n-k+1
        if (i != 0) {            // Division only, if i != 0
            result /= i;         // divides i
        }
    }

    return result;
}

std::string paddingNumbers(int width, int n) {
    std::string result;
    int padding;
    for (int k = 0; k <= n; k++) {
        unsigned long long coeff = binomialCoeff(n, k);
        
        // Append the coefficient with proper padding
        result += std::to_string(coeff);

        // Add spaces for uniform width, except for the last number in the row
        if (k != n) {
            padding = width - std::to_string(coeff).length();
            result += std::string(padding, ' ');
        }
    }
    return result;
}

std::string paddingTriagle(int number, int width) {
    std::string result;
    int totalWidth;
    int currentRowWidth;
    int leadingSpaces;
    
    for (int n = 0; n < number; n++) {
        // Calculate total width and leading spaces
        totalWidth = number * width;
        currentRowWidth = (n + 1) * width;
        leadingSpaces = (totalWidth - currentRowWidth) / 2;

        // Add leading spaces
        result += std::string(leadingSpaces, ' ');

        // Add the row generated by paddingNumbers
        result += paddingNumbers(width, n);

        // Move to the next line
        result += '\n';
    }
    return result;
}

std::string pascalsTriangle(int number, int errorFlag) {
    // Generate and print the triangle
    std::string triangle = "";

    if (errorFlag == 0)
    {
        triangle += "No valid argument passed (0 lines cannot be displayed). Using 10 as default\n\n";
        number = 10;
    }

    if (errorFlag == -1)
    {
        triangle += "No argument passed. Using 10 as default\n\n";
        number = 10;
    }

    if (number < 0) {
        return "Pascals Triangle cannot be negative!\n";;
    }

    // Atoi returns 0 if error (ASCII to numeric didnt work)
    if (number == 0 && errorFlag != 0) {
        return "Error could not convert string into a number!\n";
    }

    if (number > 25) {
        return "Number exceeds the allowed limit of lines!\n";
    }

    unsigned long long maxCoeff = binomialCoeff(number - 1, (number - 1) / 2);
    int width = std::to_string(maxCoeff).length() + 1;

    triangle += paddingTriagle(number, width);

    return triangle;
}